
/*
 *****************************************************************************
 **       This file was autogenerated from a template  DO NOT EDIT!!!!      **
 **       Changes should be made to the original source (.src) file         **
 *****************************************************************************
 */

#line 1
/*
 *****************************************************************************
 **               IMPORTANT NOTE for npy_partition.h.src -> npy_partition.h **
 *****************************************************************************
 *  The template file loops.h.src is not automatically converted into
 *  loops.h by the build system.  If you edit this file, you must manually
 *  do the conversion using numpy/distutils/conv_template.py from the
 *  command line as follows:
 *
 *  $ cd <NumPy source root directory>
 *  $ python  numpy/distutils/conv_template.py numpy/core/src/private/npy_partition.h.src
 *  $
 */


#ifndef __NPY_PARTITION_H__
#define __NPY_PARTITION_H__


#include "npy_sort.h"

/* Python include is for future object sorts */
#include <Python.h>
#include <numpy/npy_common.h>
#include <numpy/ndarraytypes.h>

#define NPY_ENOMEM 1
#define NPY_ECOMP 2




#line 46

int quickselect_bool(npy_bool *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_bool(npy_bool *v, npy_intp* tosort, npy_intp num,
                        npy_intp kth, void *NOT_USED);

int quickselect_mom_bool(npy_bool *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_mom_bool(npy_bool *v, npy_intp* tosort, npy_intp num,
                            npy_intp kth, void *NOT_USED);



#line 46

int quickselect_byte(npy_byte *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_byte(npy_byte *v, npy_intp* tosort, npy_intp num,
                        npy_intp kth, void *NOT_USED);

int quickselect_mom_byte(npy_byte *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_mom_byte(npy_byte *v, npy_intp* tosort, npy_intp num,
                            npy_intp kth, void *NOT_USED);



#line 46

int quickselect_ubyte(npy_ubyte *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_ubyte(npy_ubyte *v, npy_intp* tosort, npy_intp num,
                        npy_intp kth, void *NOT_USED);

int quickselect_mom_ubyte(npy_ubyte *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_mom_ubyte(npy_ubyte *v, npy_intp* tosort, npy_intp num,
                            npy_intp kth, void *NOT_USED);



#line 46

int quickselect_short(npy_short *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_short(npy_short *v, npy_intp* tosort, npy_intp num,
                        npy_intp kth, void *NOT_USED);

int quickselect_mom_short(npy_short *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_mom_short(npy_short *v, npy_intp* tosort, npy_intp num,
                            npy_intp kth, void *NOT_USED);



#line 46

int quickselect_ushort(npy_ushort *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_ushort(npy_ushort *v, npy_intp* tosort, npy_intp num,
                        npy_intp kth, void *NOT_USED);

int quickselect_mom_ushort(npy_ushort *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_mom_ushort(npy_ushort *v, npy_intp* tosort, npy_intp num,
                            npy_intp kth, void *NOT_USED);



#line 46

int quickselect_int(npy_int *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_int(npy_int *v, npy_intp* tosort, npy_intp num,
                        npy_intp kth, void *NOT_USED);

int quickselect_mom_int(npy_int *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_mom_int(npy_int *v, npy_intp* tosort, npy_intp num,
                            npy_intp kth, void *NOT_USED);



#line 46

int quickselect_uint(npy_uint *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_uint(npy_uint *v, npy_intp* tosort, npy_intp num,
                        npy_intp kth, void *NOT_USED);

int quickselect_mom_uint(npy_uint *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_mom_uint(npy_uint *v, npy_intp* tosort, npy_intp num,
                            npy_intp kth, void *NOT_USED);



#line 46

int quickselect_long(npy_long *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_long(npy_long *v, npy_intp* tosort, npy_intp num,
                        npy_intp kth, void *NOT_USED);

int quickselect_mom_long(npy_long *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_mom_long(npy_long *v, npy_intp* tosort, npy_intp num,
                            npy_intp kth, void *NOT_USED);



#line 46

int quickselect_ulong(npy_ulong *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_ulong(npy_ulong *v, npy_intp* tosort, npy_intp num,
                        npy_intp kth, void *NOT_USED);

int quickselect_mom_ulong(npy_ulong *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_mom_ulong(npy_ulong *v, npy_intp* tosort, npy_intp num,
                            npy_intp kth, void *NOT_USED);



#line 46

int quickselect_longlong(npy_longlong *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_longlong(npy_longlong *v, npy_intp* tosort, npy_intp num,
                        npy_intp kth, void *NOT_USED);

int quickselect_mom_longlong(npy_longlong *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_mom_longlong(npy_longlong *v, npy_intp* tosort, npy_intp num,
                            npy_intp kth, void *NOT_USED);



#line 46

int quickselect_ulonglong(npy_ulonglong *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_ulonglong(npy_ulonglong *v, npy_intp* tosort, npy_intp num,
                        npy_intp kth, void *NOT_USED);

int quickselect_mom_ulonglong(npy_ulonglong *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_mom_ulonglong(npy_ulonglong *v, npy_intp* tosort, npy_intp num,
                            npy_intp kth, void *NOT_USED);



#line 46

int quickselect_half(npy_ushort *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_half(npy_ushort *v, npy_intp* tosort, npy_intp num,
                        npy_intp kth, void *NOT_USED);

int quickselect_mom_half(npy_ushort *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_mom_half(npy_ushort *v, npy_intp* tosort, npy_intp num,
                            npy_intp kth, void *NOT_USED);



#line 46

int quickselect_float(npy_float *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_float(npy_float *v, npy_intp* tosort, npy_intp num,
                        npy_intp kth, void *NOT_USED);

int quickselect_mom_float(npy_float *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_mom_float(npy_float *v, npy_intp* tosort, npy_intp num,
                            npy_intp kth, void *NOT_USED);



#line 46

int quickselect_double(npy_double *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_double(npy_double *v, npy_intp* tosort, npy_intp num,
                        npy_intp kth, void *NOT_USED);

int quickselect_mom_double(npy_double *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_mom_double(npy_double *v, npy_intp* tosort, npy_intp num,
                            npy_intp kth, void *NOT_USED);



#line 46

int quickselect_longdouble(npy_longdouble *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_longdouble(npy_longdouble *v, npy_intp* tosort, npy_intp num,
                        npy_intp kth, void *NOT_USED);

int quickselect_mom_longdouble(npy_longdouble *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_mom_longdouble(npy_longdouble *v, npy_intp* tosort, npy_intp num,
                            npy_intp kth, void *NOT_USED);



#line 46

int quickselect_cfloat(npy_cfloat *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_cfloat(npy_cfloat *v, npy_intp* tosort, npy_intp num,
                        npy_intp kth, void *NOT_USED);

int quickselect_mom_cfloat(npy_cfloat *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_mom_cfloat(npy_cfloat *v, npy_intp* tosort, npy_intp num,
                            npy_intp kth, void *NOT_USED);



#line 46

int quickselect_cdouble(npy_cdouble *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_cdouble(npy_cdouble *v, npy_intp* tosort, npy_intp num,
                        npy_intp kth, void *NOT_USED);

int quickselect_mom_cdouble(npy_cdouble *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_mom_cdouble(npy_cdouble *v, npy_intp* tosort, npy_intp num,
                            npy_intp kth, void *NOT_USED);



#line 46

int quickselect_clongdouble(npy_clongdouble *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_clongdouble(npy_clongdouble *v, npy_intp* tosort, npy_intp num,
                        npy_intp kth, void *NOT_USED);

int quickselect_mom_clongdouble(npy_clongdouble *v, npy_intp num, npy_intp kth, void *NOT_USED);
int aquickselect_mom_clongdouble(npy_clongdouble *v, npy_intp* tosort, npy_intp num,
                            npy_intp kth, void *NOT_USED);




int quickselect_string(npy_char *vec, npy_intp cnt, PyArrayObject *arr);
int aquickselect_string(npy_char *vec, npy_intp *ind, npy_intp cnt, npy_intp kth, void *null);


int quickselect_unicode(npy_ucs4 *vec, npy_intp cnt, PyArrayObject *arr);
int aquickselect_unicode(npy_ucs4 *vec, npy_intp *ind, npy_intp cnt, npy_intp kth, void *null);

typedef struct {
    enum NPY_TYPES typenum;
    PyArray_PartitionFunc * part[NPY_NSELECTS];
    PyArray_ArgPartitionFunc * argpart[NPY_NSELECTS];
} part_map;

static part_map _part_map[] = {
#line 85
    {
        NPY_BOOL,
        {
            &quickselect_bool, 
            &quickselect_mom_bool
        },
        {
            &aquickselect_bool,
            &aquickselect_mom_bool
        }
    },

#line 85
    {
        NPY_BYTE,
        {
            &quickselect_byte, 
            &quickselect_mom_byte
        },
        {
            &aquickselect_byte,
            &aquickselect_mom_byte
        }
    },

#line 85
    {
        NPY_UBYTE,
        {
            &quickselect_ubyte, 
            &quickselect_mom_ubyte
        },
        {
            &aquickselect_ubyte,
            &aquickselect_mom_ubyte
        }
    },

#line 85
    {
        NPY_SHORT,
        {
            &quickselect_short, 
            &quickselect_mom_short
        },
        {
            &aquickselect_short,
            &aquickselect_mom_short
        }
    },

#line 85
    {
        NPY_USHORT,
        {
            &quickselect_ushort, 
            &quickselect_mom_ushort
        },
        {
            &aquickselect_ushort,
            &aquickselect_mom_ushort
        }
    },

#line 85
    {
        NPY_INT,
        {
            &quickselect_int, 
            &quickselect_mom_int
        },
        {
            &aquickselect_int,
            &aquickselect_mom_int
        }
    },

#line 85
    {
        NPY_UINT,
        {
            &quickselect_uint, 
            &quickselect_mom_uint
        },
        {
            &aquickselect_uint,
            &aquickselect_mom_uint
        }
    },

#line 85
    {
        NPY_LONG,
        {
            &quickselect_long, 
            &quickselect_mom_long
        },
        {
            &aquickselect_long,
            &aquickselect_mom_long
        }
    },

#line 85
    {
        NPY_ULONG,
        {
            &quickselect_ulong, 
            &quickselect_mom_ulong
        },
        {
            &aquickselect_ulong,
            &aquickselect_mom_ulong
        }
    },

#line 85
    {
        NPY_LONGLONG,
        {
            &quickselect_longlong, 
            &quickselect_mom_longlong
        },
        {
            &aquickselect_longlong,
            &aquickselect_mom_longlong
        }
    },

#line 85
    {
        NPY_ULONGLONG,
        {
            &quickselect_ulonglong, 
            &quickselect_mom_ulonglong
        },
        {
            &aquickselect_ulonglong,
            &aquickselect_mom_ulonglong
        }
    },

#line 85
    {
        NPY_HALF,
        {
            &quickselect_half, 
            &quickselect_mom_half
        },
        {
            &aquickselect_half,
            &aquickselect_mom_half
        }
    },

#line 85
    {
        NPY_FLOAT,
        {
            &quickselect_float, 
            &quickselect_mom_float
        },
        {
            &aquickselect_float,
            &aquickselect_mom_float
        }
    },

#line 85
    {
        NPY_DOUBLE,
        {
            &quickselect_double, 
            &quickselect_mom_double
        },
        {
            &aquickselect_double,
            &aquickselect_mom_double
        }
    },

#line 85
    {
        NPY_LONGDOUBLE,
        {
            &quickselect_longdouble, 
            &quickselect_mom_longdouble
        },
        {
            &aquickselect_longdouble,
            &aquickselect_mom_longdouble
        }
    },

#line 85
    {
        NPY_CFLOAT,
        {
            &quickselect_cfloat, 
            &quickselect_mom_cfloat
        },
        {
            &aquickselect_cfloat,
            &aquickselect_mom_cfloat
        }
    },

#line 85
    {
        NPY_CDOUBLE,
        {
            &quickselect_cdouble, 
            &quickselect_mom_cdouble
        },
        {
            &aquickselect_cdouble,
            &aquickselect_mom_cdouble
        }
    },

#line 85
    {
        NPY_CLONGDOUBLE,
        {
            &quickselect_clongdouble, 
            &quickselect_mom_clongdouble
        },
        {
            &aquickselect_clongdouble,
            &aquickselect_mom_clongdouble
        }
    },

};


static NPY_NO_EXPORT PyArray_PartitionFunc *
get_partition_func(int type, NPY_SELECTKIND which)
{
    npy_intp i;
    if (which >= NPY_NSELECTS)
        return NULL;
    for (i = 0; i < sizeof(_part_map)/sizeof(_part_map[0]); i++) {
        if (type == _part_map[i].typenum) {
            return _part_map[i].part[which];
        }
    }
    return NULL;
}


static NPY_NO_EXPORT PyArray_ArgPartitionFunc *
get_argpartition_func(int type, NPY_SELECTKIND which)
{
    npy_intp i;
    if (which >= NPY_NSELECTS)
        return NULL;
    for (i = 0; i < sizeof(_part_map)/sizeof(_part_map[0]); i++) {
        if (type == _part_map[i].typenum) {
            return _part_map[i].argpart[which];
        }
    }
    return NULL;
}

#endif

